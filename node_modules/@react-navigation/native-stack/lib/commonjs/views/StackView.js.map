{"version":3,"sources":["StackView.tsx"],"names":["Screen","ScreenComponent","StackView","state","navigation","descriptors","styles","scenes","routes","map","route","key","options","renderScene","render","presentation","animation","contentStyle","StyleSheet","absoluteFill","dispatch","StackActions","pop","source","target","content","create","flex","backgroundColor"],"mappings":"yaAAA,oDACA,yCACA,kDAEA,wDAOA,oE,w4BAMA,GAAMA,CAAAA,MAAM,CAAIC,0BAAhB,CAce,QAASC,CAAAA,SAAT,MAA8D,IAAzCC,CAAAA,KAAyC,MAAzCA,KAAyC,CAAlCC,UAAkC,MAAlCA,UAAkC,CAAtBC,WAAsB,MAAtBA,WAAsB,CAC3E,MACE,qBAAC,+BAAD,EAAa,KAAK,CAAEC,MAAM,CAACC,MAA3B,iDACGJ,KAAK,CAACK,MAAN,CAAaC,GAAb,CAAiB,SAAAC,KAAK,CAAI,2BACgBL,WAAW,CAACK,KAAK,CAACC,GAAP,CAD3B,CACjBC,OADiB,uBACjBA,OADiB,CACAC,WADA,uBACRC,MADQ,2BAEkCF,OAFlC,CAEjBG,YAFiB,CAEjBA,YAFiB,gCAEF,MAFE,uBAEMC,SAFN,CAEkCJ,OAFlC,CAEMI,SAFN,CAEiBC,YAFjB,CAEkCL,OAFlC,CAEiBK,YAFjB,CAIzB,MACE,qBAAC,MAAD,EACE,GAAG,CAAEP,KAAK,CAACC,GADb,CAEE,KAAK,CAAEO,wBAAWC,YAFpB,CAGE,iBAAiB,CAAEJ,YAHrB,CAIE,cAAc,CAAEC,SAJlB,CAKE,WAAW,CAAE,sBAAM,CACjBZ,UAAU,CAACgB,QAAX,kBACKC,sBAAaC,GAAb,EADL,EAEEC,MAAM,CAAEb,KAAK,CAACC,GAFhB,CAGEa,MAAM,CAAErB,KAAK,CAACQ,GAHhB,IAKD,CAXH,iDAaE,oBAAC,qBAAD,0BAAkBC,OAAlB,EAA2B,KAAK,CAAEF,KAAlC,kDAbF,CAcE,oBAAC,iBAAD,EAAM,KAAK,CAAE,CAACJ,MAAM,CAACmB,OAAR,CAAiBR,YAAjB,CAAb,iDAA8CJ,WAAW,EAAzD,CAdF,CADF,CAkBD,CAtBA,CADH,CADF,CA2BD,CAED,GAAMP,CAAAA,MAAM,CAAGY,wBAAWQ,MAAX,CAAkB,CAC/BD,OAAO,CAAE,CACPE,IAAI,CAAE,CADC,CAEPC,eAAe,CAAE,MAFV,CADsB,CAK/BrB,MAAM,CAAE,CACNoB,IAAI,CAAE,CADA,CALuB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { StackNavigationState, StackActions } from '@react-navigation/routers';\n\nimport {\n  // @ts-ignore\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<\n  ScreenProps & {\n    stackPresentation?: 'push' | 'modal' | 'transparentModal';\n    stackAnimation?: 'default' | 'fade' | 'none';\n    onDismissed?: () => void;\n  }\n>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function StackView({ state, navigation, descriptors }: Props) {\n  return (\n    <ScreenStack style={styles.scenes}>\n      {state.routes.map(route => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const { presentation = 'push', animation, contentStyle } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            stackPresentation={presentation}\n            stackAnimation={animation}\n            onDismissed={() => {\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          >\n            <HeaderConfig {...options} route={route} />\n            <View style={[styles.content, contentStyle]}>{renderScene()}</View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    backgroundColor: '#eee',\n  },\n  scenes: {\n    flex: 1,\n  },\n});\n"]}