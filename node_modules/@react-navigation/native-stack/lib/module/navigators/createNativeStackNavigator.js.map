{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["React","createNavigatorFactory","useNavigationBuilder","StackRouter","StackActions","screensEnabled","StackView","NativeStackNavigator","props","Error","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":"8lCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,sBADF,CAEEC,oBAFF,KAIO,wBAJP,CAMA,OACEC,WADF,CAIEC,YAJF,KAKO,2BALP,CAOA,OACEC,cADF,KAGO,sBAHP,CAIA,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,CAMA,QAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAgE,CAC9D,GAAI,CAACH,cAAc,EAAnB,CAAuB,CACrB,KAAM,IAAII,CAAAA,KAAJ,CACJ,oEADI,CAAN,CAGD,CAL6D,GAOtDC,CAAAA,gBAPsD,CAOCF,KAPD,CAOtDE,gBAPsD,CAOpCC,QAPoC,CAOCH,KAPD,CAOpCG,QAPoC,CAO1BC,aAP0B,CAOCJ,KAPD,CAO1BI,aAP0B,CAORC,IAPQ,0BAOCL,KAPD,4EAQnBN,oBAAoB,CAK7DC,WAL6D,CAKhD,CACbO,gBAAgB,CAAhBA,gBADa,CAEbC,QAAQ,CAARA,QAFa,CAGbC,aAAa,CAAbA,aAHa,CALgD,CARD,CAQtDE,KARsD,uBAQtDA,KARsD,CAQ/CC,WAR+C,uBAQ/CA,WAR+C,CAQlCC,UARkC,uBAQlCA,UARkC,CAmB9DhB,KAAK,CAACiB,SAAN,CACE,iBACED,CAAAA,UAAU,CAACE,WAAX,EACAF,UAAU,CAACE,WAAX,CAAuB,UAAvB,CAAmC,SAACC,CAAD,CAA6B,CAC9D,GAAMC,CAAAA,SAAS,CAAGJ,UAAU,CAACI,SAAX,EAAlB,CAIAC,qBAAqB,CAAC,UAAM,CAC1B,GAAIP,KAAK,CAACQ,KAAN,CAAc,CAAd,EAAmBF,SAAnB,EAAgC,CAACD,CAAC,CAACI,gBAAvC,CAAyD,CAGvDP,UAAU,CAACQ,QAAX,kBACKpB,YAAY,CAACqB,QAAb,EADL,EAEEC,MAAM,CAAEZ,KAAK,CAACa,GAFhB,IAID,CACF,CAToB,CAArB,CAUD,CAfD,CAFF,EADF,CAmBE,CAACX,UAAD,CAAaF,KAAK,CAACQ,KAAnB,CAA0BR,KAAK,CAACa,GAAhC,CAnBF,EAsBA,MACE,qBAAC,SAAD,WACE,KAAK,CAAEb,KADT,CAEE,UAAU,CAAEE,UAFd,CAGE,WAAW,CAAED,WAHf,EAIMF,IAJN,mDADF,CAQD,CAED,cAAeZ,CAAAA,sBAAsB,CAGnCM,oBAHmC,CAArC","sourcesContent":["import React from 'react';\nimport {\n  createNavigatorFactory,\n  useNavigationBuilder,\n  EventArg,\n} from '@react-navigation/core';\n\nimport {\n  StackRouter,\n  StackNavigationState,\n  StackRouterOptions,\n  StackActions,\n} from '@react-navigation/routers';\n\nimport {\n  screensEnabled,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport StackView from '../views/StackView';\nimport {\n  NativeStackNavigatorProps,\n  NativeStackNavigationOptions,\n} from '../types';\n\nfunction NativeStackNavigator(props: NativeStackNavigatorProps) {\n  if (!screensEnabled()) {\n    throw new Error(\n      'Native stack is only available if React Native Screens is enabled.'\n    );\n  }\n\n  const { initialRouteName, children, screenOptions, ...rest } = props;\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    NativeStackNavigationOptions,\n    {}\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', (e: EventArg<'tabPress'>) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (state.index > 0 && isFocused && !e.defaultPrevented) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n      {...rest}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  NativeStackNavigationOptions,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]}